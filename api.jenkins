@Library('sharedlib')_
pipeline {
    agent {
        label 'pillooapi'
    }

    tools {
        git 'mygit'
    }

    parameters {
        booleanParam(name: 'DEPLOY_PROD', defaultValue: false, description: 'Deploy to Production environment (manual/remote)')
        string(name: 'BRANCH', defaultValue: 'testing', description: 'Git branch to build')
    }

    environment {
        DEV_GIT_REPO = 'git@github.com:Rammohan-BookXpert/Pilloo-APIs.git'
        DEPLOY_DIR_PROD = 'C:\\websites\\api.pilloo.ai'
        GIT_CREDENTIALS_ID = 'pillooapi'
        RELEASES_TO_KEEP = '3'
        DISCORD_WEBHOOK_URL = credentials('discord-webhook-url')
    }

    stages {
        stage('Clean Workspace') {
            steps {
                echo 'Cleaning the workspace before deployment...'
                cleanWs()
            }
        }

        stage('Checkout Code') {
            when { expression { params.DEPLOY_DEV } }
            steps {
                echo "Checking out ${DEV_GIT_REPO} repo branch ${params.BRANCH} for Dev deployment"
                git branch: params.BRANCH, url: env.DEV_GIT_REPO, credentialsId: env.GIT_CREDENTIALS_ID
            }
        }

        stage('Deploy to Production') {
            when { expression { params.DEPLOY_PROD } }
            steps {
                echo "Deploying to Production environment..."
                script {
                    build.deployApp([
                        DEPLOY_DIR: "${env.DEPLOY_DIR_PROD}",
                        SITE_NAME: 'api.pilloo.ai',
                        SOURCE_DIR: "%WORKSPACE%\\PillooAI"
                    ])
                }
            }
        }
    }

    post {
        success {
            echo 'Deployment pipeline completed successfully!'
            script {
                def deployEnv = ''
                def deployDetails = ''
                def deployTime = new Date().format('yyyy-MM-dd HH:mm:ss')

                if (params.DEPLOY_DEV) {
                    deployEnv = 'Dev'
                    deployDetails = "Branch: ${params.BRANCH}\nDeployment Directory: ${env.DEPLOY_DIR_DEV}"
                    echo 'Dev deployment was successful!'
                } else if (params.DEPLOY_STAGING) {
                    deployEnv = 'Staging'
                    deployDetails = "Branch: ${params.BRANCH}\nDeployment Directory: ${env.DEPLOY_DIR_STAGING}"
                    echo 'Staging deployment was successful!'
                } else if (params.DEPLOY_PROD) {
                    deployEnv = 'Production'
                    deployDetails = "Branch: ${params.BRANCH}\nDeployment Directory: ${env.DEPLOY_DIR_PROD}"
                    echo 'Production deployment was successful!'
                }

                if (deployEnv) {
                    try {
                        discordSend (
                            webhookURL: env.DISCORD_WEBHOOK_URL,
                            title: "✅ api ${deployEnv} Deployment - SUCCESS",
                            description: "${deployEnv} deployment completed successfully\n\n**Details:**\n${deployDetails}",
                            footer: "Build: #${BUILD_NUMBER} | ${deployTime}",
                            link: env.BUILD_URL,
                            result: currentBuild.currentResult,
                            thumbnail: "https://jenkins.io/images/logos/jenkins/jenkins.png",
                            customUsername: "Jenkins api Pipeline"
                        )
                    } catch (Exception e) {
                        echo "Warning: Could not send Discord notification: ${e.message}"
                    }
                }
            }
        }

        failure {
            echo 'Deployment pipeline failed. Check logs for details.'
            script {
                def deployEnv = ''
                def failureReason = ''
                def deployTime = new Date().format('yyyy-MM-dd HH:mm:ss')

                if (params.DEPLOY_DEV) {
                    deployEnv = 'Dev'
                    failureReason = "Check the build logs for detailed error information."
                    echo 'Dev deployment failed!'
                } else if (params.DEPLOY_STAGING) {
                    deployEnv = 'Staging'
                    failureReason = "Check the build logs for detailed error information."
                    echo 'Staging deployment failed!'
                } else if (params.DEPLOY_PROD) {
                    deployEnv = 'Production'
                    failureReason = "Check the build logs for detailed error information."
                    echo 'Production deployment failed!'
                }

                if (deployEnv) {
                    try {
                        discordSend (
                            webhookURL: env.DISCORD_WEBHOOK_URL,
                            title: "❌ api ${deployEnv} Deployment - FAILED",
                            description: "${deployEnv} deployment failed!\n\n**Error Information:**\n${failureReason}\n\n**Build Details:**\nBranch: ${params.BRANCH}",
                            footer: "Build: #${BUILD_NUMBER} | ${deployTime}",
                            link: env.BUILD_URL,
                            result: currentBuild.currentResult,
                            thumbnail: "https://jenkins.io/images/logos/jenkins/jenkins.png",
                            customUsername: "Jenkins api Pipeline"
                        )
                    } catch (Exception e) {
                        echo "Warning: Could not send Discord notification: ${e.message}"
                    }
                }
            }
        }

        always {
            echo 'Performing cleanup operations...'
            cleanWs()
            echo 'Cleanup completed successfully.'

            script {
                try {
                    discordSend (
                        webhookURL: env.DISCORD_WEBHOOK_URL,
                        title: "api Pipeline - Build #${BUILD_NUMBER} Complete",
                        description: "Build completed with result: ${currentBuild.currentResult}\nTotal execution time: ${currentBuild.durationString}",
                        footer: "${new Date().format('yyyy-MM-dd HH:mm:ss')}",
                        link: env.BUILD_URL,
                        result: currentBuild.currentResult,
                        thumbnail: "https://jenkins.io/images/logos/jenkins/jenkins.png",
                        customUsername: "Jenkins api Pipeline"
                    )
                } catch (Exception e) {
                    echo "Warning: Could not send Discord notification: ${e.message}"
                }
            }
        }
    }
}
