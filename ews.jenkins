@Library('sharedlib')_
pipeline {
    agent any

    // Poll SCM to trigger pipeline automatically for dev deploys
    triggers {
        pollSCM('H/2 * * * *')  // every 2 minutes, adjust as needed
    }

    tools {
        git 'mygit'
    }

    parameters {
        booleanParam(name: 'DEPLOY_DEV', defaultValue: false, description: 'Deploy to Dev environment (auto by SCM)')
        booleanParam(name: 'DEPLOY_STAGING', defaultValue: false, description: 'Deploy to Staging environment (manual/remote)')
        booleanParam(name: 'DEPLOY_PROD', defaultValue: false, description: 'Deploy to Production environment (manual/remote)')
        string(name: 'BRANCH', defaultValue: 'main', description: 'Git branch to build')
    }

    environment {
        // Git repo for dev environment (ews)        
        DEV_GIT_REPO = 'git@github.com:Fairsoftsolution/FairEWS.git'

        // Deployment directories for each environment
        DEPLOY_DIR_DEV = 'C:\\websites\\dev-ews.fairsoftservices.com'
        DEPLOY_DIR_STAGING = 'C:\\websites\\staging-ews.fairsoftservices.com'
        DEPLOY_DIR_PROD = 'C:\\websites\\ews.fairsoftservices.com'
        
        // Credentials IDs
        GIT_CREDENTIALS_ID = 'Github'
        
        // Deployment settings
        RELEASES_TO_KEEP = '3'
        
        // Notification settings
        DISCORD_WEBHOOK_URL = credentials('discord-webhook-url')
    }

    stages {
        stage('Clean Workspace') {
            steps {
                echo 'Cleaning the workspace before deployment...'
                cleanWs()
            }
        }
        
        stage('Checkout Code') {
            when { expression { params.DEPLOY_DEV } }
            steps {
                echo "Checking out ${DEV_GIT_REPO} repo branch ${params.BRANCH} for Dev deployment"
                git branch: params.BRANCH, url: env.DEV_GIT_REPO, credentialsId: env.GIT_CREDENTIALS_ID
            }
        }

        stage('Deploy to Dev') {
            when { expression { params.DEPLOY_DEV } }
            steps {
                echo "Deploying to Dev environment..."
                script {
                    build.deployApp([
                     DEPLOY_DIR: "${env.DEPLOY_DIR_DEV}",
                     SITE_NAME: 'dev-ews.fairsoftservices.com',
                     SOURCE_DIR: "%WORKSPACE%"
                    ])
                }

                echo "Setting file permissions for uploaded Excel documents..."
                bat """
                @echo off
                setlocal enabledelayedexpansion
                set "DEPLOY_DIR=${env.DEPLOY_DIR_DEV}"
                set "DOCS_DIR=!DEPLOY_DIR!\\current\\uploadedDocuments"

                REM === Check if uploadedDocuments directory exists ===
                if not exist "!DOCS_DIR!" (
                    echo [WARNING] uploadedDocuments directory not found ...
                )

                set FILES="EWS Format.xlsx" "EWS Format1.xlsx" "Followups.xlsx" "Dashboard_Followups.xlsx"
                for %%F in (!FILES!) do (
                    if exist "!DOCS_DIR!\\%%~F" (
                        echo [INFO] Setting permissions for %%~F
                        icacls "!DOCS_DIR!\\%%~F" /grant Users:F
                        if !errorlevel! neq 0 (
                            echo [ERROR] Failed to set permissions for %%~F (Error: !errorlevel!)
                        )
                    ) else (
                        echo [WARNING] File not found: %%~F
                    )
                )

                endlocal
                """
            }
        }

        stage('Deploy to Staging') {
            when { expression { params.DEPLOY_STAGING } }
            steps {
                echo "Deploying to Staging environment..."
                script {
                    build.deployApp([
                     DEPLOY_DIR: "${env.DEPLOY_DIR_STAGING}",
                     SITE_NAME: 'staging-ews.fairsoftservices.com',
                     SOURCE_DIR: "${env.DEPLOY_DIR_DEV}\\current"
                    ])
                }
                echo "Setting file permissions for uploaded Excel documents..."
                bat """
                @echo off
                setlocal enabledelayedexpansion
                set "DEPLOY_DIR=${env.DEPLOY_DIR_STAGING}"
                set "DOCS_DIR=!DEPLOY_DIR!\\current\\uploadedDocuments"

                REM === Check if uploadedDocuments directory exists ===
                if not exist "!DOCS_DIR!" (
                    echo [WARNING] uploadedDocuments directory not found ...
                )

                set FILES="EWS Format.xlsx" "EWS Format1.xlsx" "Followups.xlsx" "Dashboard_Followups.xlsx"
                for %%F in (!FILES!) do (
                    if exist "!DOCS_DIR!\\%%~F" (
                        echo [INFO] Setting permissions for %%~F
                        icacls "!DOCS_DIR!\\%%~F" /grant Users:F
                        if !errorlevel! neq 0 (
                            echo [ERROR] Failed to set permissions for %%~F (Error: !errorlevel!)
                        )
                    ) else (
                        echo [WARNING] File not found: %%~F
                    )
                )

                endlocal
                """
            }
        }

        stage('Deploy to Production') {
            when { expression { params.DEPLOY_PROD } }
            steps {
                echo "Deploying to Production environment..."
                script {
                    build.deployApp([
                     DEPLOY_DIR: "${env.DEPLOY_DIR_PROD}",
                     SITE_NAME: 'ews.fairsoftservices.com',
                     SOURCE_DIR: "${env.DEPLOY_DIR_STAGING}\\current"
                    ])
                }
            }
                echo "Setting file permissions for uploaded Excel documents..."
                bat """
                @echo off
                setlocal enabledelayedexpansion
                set "DEPLOY_DIR=${env.DEPLOY_DIR_PROD}"
                set "DOCS_DIR=!DEPLOY_DIR!\\current\\uploadedDocuments"

                REM === Check if uploadedDocuments directory exists ===
                if not exist "!DOCS_DIR!" (
                    echo [WARNING] uploadedDocuments directory not found ...
                )

                set FILES="EWS Format.xlsx" "EWS Format1.xlsx" "Followups.xlsx" "Dashboard_Followups.xlsx"
                for %%F in (!FILES!) do (
                    if exist "!DOCS_DIR!\\%%~F" (
                        echo [INFO] Setting permissions for %%~F
                        icacls "!DOCS_DIR!\\%%~F" /grant Users:F
                        if !errorlevel! neq 0 (
                            echo [ERROR] Failed to set permissions for %%~F (Error: !errorlevel!)
                        )
                    ) else (
                        echo [WARNING] File not found: %%~F
                    )
                )

                endlocal
                """
        }
    }

    post {
        success {
            echo 'Deployment pipeline completed successfully!'
            script {
                def deployEnv = ''
                def deployDetails = ''
                def deployTime = new Date().format('yyyy-MM-dd HH:mm:ss')
                
                if (params.DEPLOY_DEV) {
                    deployEnv = 'Dev'
                    deployDetails = "Branch: ${params.BRANCH}\nDeployment Directory: ${env.DEPLOY_DIR_DEV}"
                    echo 'Dev deployment was successful!'
                } else if (params.DEPLOY_STAGING) {
                    deployEnv = 'Staging'
                    deployDetails = "Branch: ${params.BRANCH}\nDeployment Directory: ${env.DEPLOY_DIR_STAGING}"
                    echo 'Staging deployment was successful!'
                } else if (params.DEPLOY_PROD) {
                    deployEnv = 'Production'
                    deployDetails = "Branch: ${params.BRANCH}\nDeployment Directory: ${env.DEPLOY_DIR_PROD}"
                    echo 'Production deployment was successful!'
                }
                
                if (deployEnv) {
                    try {
                        // Send Discord notification with rich formatting
                        discordSend (
                            webhookURL: env.DISCORD_WEBHOOK_URL,
                            title: "✅ ews ${deployEnv} Deployment - SUCCESS",
                            description: "${deployEnv} deployment completed successfully\n\n**Details:**\n${deployDetails}",
                            footer: "Build: #${BUILD_NUMBER} | ${deployTime}",
                            link: env.BUILD_URL,
                            result: currentBuild.currentResult,
                            thumbnail: "https://jenkins.io/images/logos/jenkins/jenkins.png",
                            customUsername: "Jenkins ews Pipeline"
                        )
                    } catch (Exception e) {
                        echo "Warning: Could not send Discord notification: ${e.message}"
                    }
                }
            }
        }
        failure {
            echo 'Deployment pipeline failed. Check logs for details.'
            script {
                def deployEnv = ''
                def failureReason = ''
                def deployTime = new Date().format('yyyy-MM-dd HH:mm:ss')
                
                if (params.DEPLOY_DEV) {
                    deployEnv = 'Dev'
                    failureReason = "Check the build logs for detailed error information."
                    echo 'Dev deployment failed!'
                } else if (params.DEPLOY_STAGING) {
                    deployEnv = 'Staging'
                    failureReason = "Check the build logs for detailed error information."
                    echo 'Staging deployment failed!'
                } else if (params.DEPLOY_PROD) {
                    deployEnv = 'Production'
                    failureReason = "Check the build logs for detailed error information."
                    echo 'Production deployment failed!'
                }
                
                if (deployEnv) {
                    try {
                        // Send Discord notification with rich formatting for failure
                        discordSend (
                            webhookURL: env.DISCORD_WEBHOOK_URL,
                            title: "❌ ews ${deployEnv} Deployment - FAILED",
                            description: "${deployEnv} deployment failed!\n\n**Error Information:**\n${failureReason}\n\n**Build Details:**\nBranch: ${params.BRANCH}",
                            footer: "Build: #${BUILD_NUMBER} | ${deployTime}",
                            link: env.BUILD_URL,
                            result: currentBuild.currentResult,
                            thumbnail: "https://jenkins.io/images/logos/jenkins/jenkins.png",
                            customUsername: "Jenkins ews Pipeline"
                        )
                    } catch (Exception e) {
                        echo "Warning: Could not send Discord notification: ${e.message}"
                    }
                }
            }
        }
        always {
            echo 'Performing cleanup operations...'
            cleanWs()
            echo 'Cleanup completed successfully.'
            
            // Optional: Notify about build completion regardless of result
            echo "Build ${currentBuild.fullDisplayName} completed with result: ${currentBuild.currentResult}"

            // Send a simple notification about build completion
            script {
                try {
                    discordSend (
                        webhookURL: env.DISCORD_WEBHOOK_URL,
                        title: "ews Pipeline - Build #${BUILD_NUMBER} Complete",
                        description: "Build completed with result: ${currentBuild.currentResult}\nTotal execution time: ${currentBuild.durationString}",
                        footer: "${new Date().format('yyyy-MM-dd HH:mm:ss')}",
                        link: env.BUILD_URL,
                        result: currentBuild.currentResult,
                        thumbnail: "https://jenkins.io/images/logos/jenkins/jenkins.png",
                        customUsername: "Jenkins ews Pipeline"
                    )
                } catch (Exception e) {
                    echo "Warning: Could not send Discord notification: ${e.message}"
                }
            }
        }
    }
}