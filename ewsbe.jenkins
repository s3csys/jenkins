pipeline {
    agent any

    // Poll SCM on the BookEWS repo to trigger dev deployments automatically
    triggers {
        pollSCM('H/2 * * * *')  // every 2 minutes, adjust as needed
    }

    tools {
        git 'mygit'
    }

    parameters {
        booleanParam(name: 'DEPLOY_DEV', defaultValue: false, description: 'Deploy to Dev environment (auto by SCM)')
        booleanParam(name: 'DEPLOY_STAGING', defaultValue: false, description: 'Deploy to Staging environment (manual/remote)')
        booleanParam(name: 'DEPLOY_PROD', defaultValue: false, description: 'Deploy to Production environment (manual/remote)')
        string(name: 'BRANCH', defaultValue: 'master', description: 'Git branch to build')
        choice(name: 'LOG_LEVEL', choices: ['INFO', 'DEBUG', 'VERBOSE'], description: 'Logging level for deployment')
    }

    environment {
        // Git repo for dev environment (BookEWS)
        DEV_GIT_REPO = 'git@github.com:Fairsoftsolution/BookEWS.git'

        // Deployment directories for each environment
        DEPLOY_DIR_DEV = 'C:\\websites\\dev-ewsbe.fairsoftservices.com'
        DEPLOY_DIR_STAGING = 'C:\\websites\\staging-ewsbe.fairsoftservices.com'
        DEPLOY_DIR_PROD = 'C:\\websites\\ewsbe.fairsoftservices.com'
        
        // Credentials IDs
        GIT_CREDENTIALS_ID = 'git_bookews'
        
        // Deployment settings
        RELEASES_TO_KEEP = '5'
        
        // Notification settings
        DISCORD_WEBHOOK_URL = credentials('discord-webhook-url')
    }

    stages {
        stage('Clean Workspace') {
            steps {
                echo 'Cleaning the workspace before deployment...'
                cleanWs()
            }
        }
        
        stage('Checkout Dev Project Code') {
            when { expression { params.DEPLOY_DEV } }
            steps {
                echo "Checking out BookEWS repo branch ${params.BRANCH} for Dev deployment"
                git branch: params.BRANCH, url: env.DEV_GIT_REPO, credentialsId: env.GIT_CREDENTIALS_ID
            }
        }
        
        // stage('Checkout Code for Staging/Prod') {
        //     when {
        //         anyOf {
        //             expression { params.DEPLOY_STAGING }
        //             expression { params.DEPLOY_PROD }
        //         }
        //     }
        //     steps {
        //         echo "Checking out branch ${params.BRANCH} from repo ${env.DEV_GIT_REPO}"
        //         git branch: params.BRANCH, url: env.DEV_GIT_REPO, credentialsId: env.GIT_CREDENTIALS_ID
        //     }
        // }

        stage('Deploy to Dev') {
            when { expression { params.DEPLOY_DEV } }
            steps {
                echo "Deploying to Dev environment..."
                bat """
                @echo off
                set "DEPLOY_DIR=${env.DEPLOY_DIR_DEV}"
                set "SITE_NAME=dev-ewsbe.fairsoftservices.com"
                set "RELEASES_DIR=%DEPLOY_DIR%\\releases"
                set "SHARED_DIR=%DEPLOY_DIR%\\shared"
                set "SOURCE_DIR=%WORKSPACE%\\BookEWS"

                :: Timestamp generation using old format
                for /f %%i in ('powershell -NoProfile -Command "Get-Date -Format 'dddd-MMMM-dd-yyyy-HH-mm-tt'"') do set "TIMESTAMP=%%i"
                set "NEW_RELEASE_DIR=%RELEASES_DIR%\\%TIMESTAMP%"

                :: Create directories
                if not exist "%RELEASES_DIR%" mkdir "%RELEASES_DIR%"
                if not exist "%NEW_RELEASE_DIR%" mkdir "%NEW_RELEASE_DIR%"

                :: File copy with detailed logging
                echo [INFO] Copying files from %SOURCE_DIR% to %NEW_RELEASE_DIR%
                robocopy "%SOURCE_DIR%" "%NEW_RELEASE_DIR%" /MIR /Z /XA:H /W:5 /NFL /NDL /NJH /NJS /nc /ns /np /LOG+:deploy.log
                if %errorlevel% GEQ 8 (
                    echo [ERROR] Robocopy failed with error level %errorlevel%
                    exit /b 1
                )

                :: Clean previous symlink
                if exist "%DEPLOY_DIR%\\current" (
                    echo [INFO] Removing previous symlink
                    rmdir "%DEPLOY_DIR%\\current"
                )

                :: Remove existing Web.config if present
                if exist "%NEW_RELEASE_DIR%\\Web.config" (
                    echo [INFO] Removing existing Web.config
                    del "%NEW_RELEASE_DIR%\\Web.config"
                )

                :: Create new symlinks
                echo [INFO] Creating new symlinks
                mklink /D "%DEPLOY_DIR%\\current" "%NEW_RELEASE_DIR%" || (
                    echo [ERROR] Failed to create current symlink
                    exit /b 1
                )
                mklink /H "%NEW_RELEASE_DIR%\\Web.config" "%SHARED_DIR%\\Web.config" || (
                    echo [ERROR] Failed to create Web.config symlink
                    exit /b 1
                )

                :: Update IIS site
                echo [INFO] Updating IIS site configuration
                powershell.exe -NoProfile -ExecutionPolicy Bypass -Command ^
                    "Import-Module WebAdministration; ^
                    Set-ItemProperty 'IIS:\\Sites\\%SITE_NAME%' -Name physicalPath -Value '%DEPLOY_DIR%\\current'; ^
                    Stop-WebSite -Name '%SITE_NAME%'; ^
                    Start-WebSite -Name '%SITE_NAME%'"

                :: Clean IIS temp files
                echo [INFO] Cleaning IIS temporary files
                %windir%\\system32\\inetsrv\\appcmd.exe stop site "%SITE_NAME%"
                set "TEMP_DIR=C:\\inetpub\\temp\\IIS Temporary Compressed Files\\%SITE_NAME%"
                if exist "!TEMP_DIR!" (
                    echo [INFO] Deleting temp directory: !TEMP_DIR!
                    rmdir /s /q "!TEMP_DIR!"
                    if %errorlevel% neq 0 (
                        echo [WARNING] Failed to delete temp directory (Error: %errorlevel%)
                    )
                ) else (
                    echo [INFO] Temp directory not found: !TEMP_DIR!
                )
                %windir%\\system32\\inetsrv\\appcmd.exe start site "%SITE_NAME%"

                :: Clean old releases (keep last N as defined in environment)
                echo [INFO] Cleaning old releases (keeping last ${env.RELEASES_TO_KEEP})
                pushd "%RELEASES_DIR%"
                set COUNT=0
                for /f "delims=" %%d in ('dir /b /ad /o-d') do (
                    set /a COUNT+=1
                    if !COUNT! GTR %RELEASES_TO_KEEP% (
                        echo [INFO] Deleting old build: %%d
                        rmdir /s /q "%%d" 2>nul
                    )
                )
                popd
                endlocal
                echo [SUCCESS] Deployment completed
                """
            }
        }

        stage('Deploy to Staging') {
            when { expression { params.DEPLOY_STAGING } }
            steps {
                echo "Deploying to Staging environment..."
                bat """
                @echo off
                set "DEPLOY_DIR=${env.DEPLOY_DIR_STAGING}"
                set "SITE_NAME=staging-ewsbe.fairsoftservices.com"
                set "RELEASES_DIR=%DEPLOY_DIR%\\releases"
                set "SHARED_DIR=%DEPLOY_DIR%\\shared"
                set "SOURCE_DIR=${env.DEPLOY_DIR_DEV}\\current"

                :: Timestamp generation using old format
                for /f %%i in ('powershell -NoProfile -Command "Get-Date -Format 'dddd-MMMM-dd-yyyy-HH-mm-tt'"') do set "TIMESTAMP=%%i"
                set "NEW_RELEASE_DIR=%RELEASES_DIR%\\%TIMESTAMP%"

                :: Create directories
                if not exist "%RELEASES_DIR%" mkdir "%RELEASES_DIR%"
                if not exist "%NEW_RELEASE_DIR%" mkdir "%NEW_RELEASE_DIR%"

                :: File copy with detailed logging
                echo [INFO] Copying files from %SOURCE_DIR% to %NEW_RELEASE_DIR%
                robocopy "%SOURCE_DIR%" "%NEW_RELEASE_DIR%" /MIR /Z /XA:H /W:5 /NFL /NDL /NJH /NJS /nc /ns /np /LOG+:deploy.log
                if %errorlevel% GEQ 8 (
                    echo [ERROR] Robocopy failed with error level %errorlevel%
                    exit /b 1
                )

                :: Clean previous symlink
                if exist "%DEPLOY_DIR%\\current" (
                    echo [INFO] Removing previous symlink
                    rmdir "%DEPLOY_DIR%\\current"
                )

                :: Remove existing Web.config if present
                if exist "%NEW_RELEASE_DIR%\\Web.config" (
                    echo [INFO] Removing existing Web.config
                    del "%NEW_RELEASE_DIR%\\Web.config"
                )

                :: Create new symlinks
                echo [INFO] Creating new symlinks
                mklink /D "%DEPLOY_DIR%\\current" "%NEW_RELEASE_DIR%" || (
                    echo [ERROR] Failed to create current symlink
                    exit /b 1
                )
                mklink /H "%NEW_RELEASE_DIR%\\Web.config" "%SHARED_DIR%\\Web.config" || (
                    echo [ERROR] Failed to create Web.config symlink
                    exit /b 1
                )

                :: Update IIS site
                echo [INFO] Updating IIS site configuration
                powershell.exe -NoProfile -ExecutionPolicy Bypass -Command ^
                    "Import-Module WebAdministration; ^
                    Set-ItemProperty 'IIS:\\Sites\\%SITE_NAME%' -Name physicalPath -Value '%DEPLOY_DIR%\\current'; ^
                    Stop-WebSite -Name '%SITE_NAME%'; ^
                    Start-WebSite -Name '%SITE_NAME%'"

                :: Clean IIS temp files
                echo [INFO] Cleaning IIS temporary files
                %windir%\\system32\\inetsrv\\appcmd.exe stop site "%SITE_NAME%"
                set "TEMP_DIR=C:\\inetpub\\temp\\IIS Temporary Compressed Files\\%SITE_NAME%"
                if exist "!TEMP_DIR!" (
                    echo [INFO] Deleting temp directory: !TEMP_DIR!
                    rmdir /s /q "!TEMP_DIR!"
                    if %errorlevel% neq 0 (
                        echo [WARNING] Failed to delete temp directory (Error: %errorlevel%)
                    )
                ) else (
                    echo [INFO] Temp directory not found: !TEMP_DIR!
                )
                %windir%\\system32\\inetsrv\\appcmd.exe start site "%SITE_NAME%"

                :: Clean old releases (keep last N as defined in environment)
                echo [INFO] Cleaning old releases (keeping last ${env.RELEASES_TO_KEEP})
                pushd "%RELEASES_DIR%"
                set COUNT=0
                for /f "delims=" %%d in ('dir /b /ad /o-d') do (
                    set /a COUNT+=1
                    if !COUNT! GTR %RELEASES_TO_KEEP% (
                        echo [INFO] Deleting old build: %%d
                        rmdir /s /q "%%d" 2>nul
                    )
                )
                popd
                endlocal
                echo [SUCCESS] Deployment completed
                """
            }
        }

        stage('Deploy to Production') {
            when { expression { params.DEPLOY_PROD } }
            steps {
                // Require explicit approval for production deployment
                // input message: 'Approve Production Deployment?', ok: 'Deploy to Production'
                echo "Deploying to Production environment..."
                bat """
                @echo off
                set "DEPLOY_DIR=${env.DEPLOY_DIR_PROD}"
                set "SITE_NAME=ewsbe.fairsoftservices.com"
                set "RELEASES_DIR=%DEPLOY_DIR%\\releases"
                set "SHARED_DIR=%DEPLOY_DIR%\\shared"
                set "SOURCE_DIR=${env.DEPLOY_DIR_STAGING}\\current"

                :: Timestamp generation using old format
                for /f %%i in ('powershell -NoProfile -Command "Get-Date -Format 'dddd-MMMM-dd-yyyy-HH-mm-tt'"') do set "TIMESTAMP=%%i"
                set "NEW_RELEASE_DIR=%RELEASES_DIR%\\%TIMESTAMP%"

                :: Create directories
                if not exist "%RELEASES_DIR%" mkdir "%RELEASES_DIR%"
                if not exist "%NEW_RELEASE_DIR%" mkdir "%NEW_RELEASE_DIR%"

                :: File copy with detailed logging
                echo [INFO] Copying files from %SOURCE_DIR% to %NEW_RELEASE_DIR%
                robocopy "%SOURCE_DIR%" "%NEW_RELEASE_DIR%" /MIR /Z /XA:H /W:5 /NFL /NDL /NJH /NJS /nc /ns /np /LOG+:deploy.log
                if %errorlevel% GEQ 8 (
                    echo [ERROR] Robocopy failed with error level %errorlevel%
                    exit /b 1
                )

                :: Clean previous symlink
                if exist "%DEPLOY_DIR%\\current" (
                    echo [INFO] Removing previous symlink
                    rmdir "%DEPLOY_DIR%\\current"
                )

                :: Remove existing Web.config if present
                if exist "%NEW_RELEASE_DIR%\\Web.config" (
                    echo [INFO] Removing existing Web.config
                    del "%NEW_RELEASE_DIR%\\Web.config"
                )

                :: Create new symlinks
                echo [INFO] Creating new symlinks
                mklink /D "%DEPLOY_DIR%\\current" "%NEW_RELEASE_DIR%" || (
                    echo [ERROR] Failed to create current symlink
                    exit /b 1
                )
                mklink "%NEW_RELEASE_DIR%\\Web.config" "%SHARED_DIR%\\Web.config" || (
                    echo [ERROR] Failed to create Web.config symlink
                    exit /b 1
                )

                :: Update IIS site
                echo [INFO] Updating IIS site configuration
                powershell.exe -NoProfile -ExecutionPolicy Bypass -Command ^
                    "Import-Module WebAdministration; ^
                    Set-ItemProperty 'IIS:\\Sites\\%SITE_NAME%' -Name physicalPath -Value '%DEPLOY_DIR%\\current'; ^
                    Stop-WebSite -Name '%SITE_NAME%'; ^
                    Start-WebSite -Name '%SITE_NAME%'"

                :: Clean IIS temp files
                echo [INFO] Cleaning IIS temporary files
                %windir%\\system32\\inetsrv\\appcmd.exe stop site "%SITE_NAME%"
                set "TEMP_DIR=C:\\inetpub\\temp\\IIS Temporary Compressed Files\\%SITE_NAME%"
                if exist "!TEMP_DIR!" (
                    echo [INFO] Deleting temp directory: !TEMP_DIR!
                    rmdir /s /q "!TEMP_DIR!"
                    if %errorlevel% neq 0 (
                        echo [WARNING] Failed to delete temp directory (Error: %errorlevel%)
                    )
                ) else (
                    echo [INFO] Temp directory not found: !TEMP_DIR!
                )
                %windir%\\system32\\inetsrv\\appcmd.exe start site "%SITE_NAME%"

                :: Clean old releases (keep last N as defined in environment)
                echo [INFO] Cleaning old releases (keeping last ${env.RELEASES_TO_KEEP})
                pushd "%RELEASES_DIR%"
                set COUNT=0
                for /f "delims=" %%d in ('dir /b /ad /o-d') do (
                    set /a COUNT+=1
                    if !COUNT! GTR %RELEASES_TO_KEEP% (
                        echo [INFO] Deleting old build: %%d
                        rmdir /s /q "%%d" 2>nul
                    )
                )
                popd
                endlocal
                echo [SUCCESS] Deployment completed
                """
            }
        }
    }

    post {
        success {
            echo 'Deployment pipeline completed successfully!'
            script {
                def deployEnv = ''
                def deployDetails = ''
                def deployTime = new Date().format('yyyy-MM-dd HH:mm:ss')
                
                if (params.DEPLOY_DEV) {
                    deployEnv = 'Dev'
                    deployDetails = "Branch: ${params.BRANCH}\nDeployment Directory: ${env.DEPLOY_DIR_DEV}"
                    echo 'Dev deployment was successful!'
                } else if (params.DEPLOY_STAGING) {
                    deployEnv = 'Staging'
                    deployDetails = "Branch: ${params.BRANCH}\nDeployment Directory: ${env.DEPLOY_DIR_STAGING}"
                    echo 'Staging deployment was successful!'
                } else if (params.DEPLOY_PROD) {
                    deployEnv = 'Production'
                    deployDetails = "Branch: ${params.BRANCH}\nDeployment Directory: ${env.DEPLOY_DIR_PROD}"
                    echo 'Production deployment was successful!'
                }
                
                if (deployEnv) {
                    // Send Discord notification with rich formatting
                    discordSend (
                        webhookURL: env.DISCORD_WEBHOOK_URL,
                        title: "✅ EWSBE ${deployEnv} Deployment - SUCCESS",
                        description: "${deployEnv} deployment completed successfully\n\n**Details:**\n${deployDetails}",
                        footer: "Build: #${BUILD_NUMBER} | ${deployTime}",
                        link: env.BUILD_URL,
                        result: currentBuild.currentResult,
                        thumbnail: "https://jenkins.io/images/logos/jenkins/jenkins.png",
                        image: "https://media.giphy.com/media/v1.Y2lkPTc5MGI3NjExcDdtY2JiZWV2ZXg5OTIzMHE2bWF0MmVvNnBnc3Vxb2VpMWJhcWJvdCZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/ummeQH0c3jdm2o3Olp/giphy.gif",
                        customUsername: "Jenkins EWSBE Pipeline"
                    )
                }
            }
        }
        failure {
            echo 'Deployment pipeline failed. Check logs for details.'
            script {
                def deployEnv = ''
                def failureReason = ''
                def deployTime = new Date().format('yyyy-MM-dd HH:mm:ss')
                
                if (params.DEPLOY_DEV) {
                    deployEnv = 'Dev'
                    failureReason = "Check the build logs for detailed error information."
                    echo 'Dev deployment failed!'
                } else if (params.DEPLOY_STAGING) {
                    deployEnv = 'Staging'
                    failureReason = "Check the build logs for detailed error information."
                    echo 'Staging deployment failed!'
                } else if (params.DEPLOY_PROD) {
                    deployEnv = 'Production'
                    failureReason = "Check the build logs for detailed error information."
                    echo 'Production deployment failed!'
                }
                
                if (deployEnv) {
                    // Send Discord notification with rich formatting for failure
                    discordSend (
                        webhookURL: env.DISCORD_WEBHOOK_URL,
                        title: "❌ EWSBE ${deployEnv} Deployment - FAILED",
                        description: "${deployEnv} deployment failed!\n\n**Error Information:**\n${failureReason}\n\n**Build Details:**\nBranch: ${params.BRANCH}\nLog Level: ${params.LOG_LEVEL}",
                        footer: "Build: #${BUILD_NUMBER} | ${deployTime}",
                        link: env.BUILD_URL,
                        result: currentBuild.currentResult,
                        thumbnail: "https://jenkins.io/images/logos/jenkins/jenkins.png",
                        customUsername: "Jenkins EWSBE Pipeline"
                    )
                }
            }
        }
        always {
            echo 'Performing cleanup operations...'
            script {
                // Clean workspace
                cleanWs()
                
                // Delete temporary files
                bat '''
                @echo off
                echo Cleaning temporary files...
                if exist "deploy.log" del /f "deploy.log"
                if exist "error.log" del /f "error.log"
                if exist "%TEMP%\\jenkins-temp-*" rmdir /s /q "%TEMP%\\jenkins-temp-*"
                '''
                
                // Archive artifacts if they exist
                archiveArtifacts artifacts: '**/*.log', allowEmptyArchive: true
                
                // Optional: Notify about build completion regardless of result
                echo "Build ${currentBuild.fullDisplayName} completed with result: ${currentBuild.currentResult}"
                
                // Send a simple notification about build completion
                discordSend (
                    webhookURL: env.DISCORD_WEBHOOK_URL,
                    title: "EWSBE Pipeline - Build #${BUILD_NUMBER} Complete",
                    description: "Build completed with result: ${currentBuild.currentResult}\nTotal execution time: ${currentBuild.durationString}",
                    footer: "${new Date().format('yyyy-MM-dd HH:mm:ss')}",
                    link: env.BUILD_URL,
                    result: currentBuild.currentResult,
                    thumbnail: "https://jenkins.io/images/logos/jenkins/jenkins.png",
                    customUsername: "Jenkins EWSBE Pipeline"
                )
            }
        }
    }
}